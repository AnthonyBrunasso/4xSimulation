# Define game types with game_types.py.
import sys
sys.path.append('../data')

import game_types 
import store 

# This will need to be updated if unique characters are added
# to game type names that aren't valid as the key of an enum.
def enumify(s):
  return s.replace(" ","_").upper()

def generate_gametype(game_type, object_types, target_file):
  type_name = game_type.upper() + "_TYPE"
  param_name = game_type.lower()
  # Give all generated enums an unknown at id 0.
  object_types.append(["Unknown", 0])

  # Declare enum.
  target_file.write("""\nenum class %(type_name)s {\n""" % {
  'type_name' : type_name,
  })

  # Generate keys and values for enum types.
  for otype in object_types:
    target_file.write("""  {0} = {1},\n""".format(enumify(otype[0]), otype[1]))

  target_file.write("};\n\n")

  # Create enum to string function.
  target_file.write("inline const char* get_{0}_name({1} {2}) {{\n".format(param_name, type_name, param_name))

  target_file.write("  switch ({0}) {{\n".format(param_name))
  for otype in object_types:
    target_file.write("""  case %(enum)s::%(type)s:\n    return "%(name)s";\n""" %  {
  'enum' : type_name,
  'type' : enumify(otype[0]), 
  'name' : otype[0]})

  target_file.write("  default:\n    return {0};\n  }}\n".format("\"Unknown\""))
  target_file.write("  return \"Unknown\";\n}\n\n")

  # Create string to enum function.
  target_file.write("inline {0} get_{1}(const std::string& name) {{\n".format(type_name, type_name.lower()))
  for otype in object_types:
    target_file.write("""  if (name == "%(name)s") return %(type)s;\n""" %  {
  'name' : otype[0], 
  'type' : str(type_name + "::" + enumify(otype[0]))})

  target_file.write("  return {0};\n}}\n".format(str(type_name + "::UNKNOWN")))

  # Function to enumerate over all enums.  
  target_file.write("\ninline void for_each_{0}(std::function<void({1})> operation) {{\n".format(type_name.lower(), type_name))
  target_file.write("  std::vector<{0}> enums {{\n".format(type_name))
  for otype in object_types:
    target_file.write("""    %(enum)s,\n""" %  {
  'enum' : str(type_name + "::" + enumify(otype[0]))}) 
  target_file.write("  };\n")
  target_file.write("  for (auto type : enums) operation(type);\n}\n")


if __name__ == '__main__':
  import sys
  # Redirect out to game types file.
  target_file = open('../include/game_types.h', 'w')

  target_file.write("// NOTE: This is an autogenerated file. Modify at your own peril!\n")
  target_file.write("// To make changes to these types, or add new ones:\n")
  target_file.write("//    Edit data/game_types.py\n")
  target_file.write("//    Run tools/type_generator.py\n\n")
  target_file.write("#pragma once\n\n")
  target_file.write("#include <string>\n")
  target_file.write("#include <functional>\n")
  target_file.write("#include <vector>\n")

  for game_type, object_types in store.game_types.items():
    generate_gametype(game_type, object_types, target_file)

  target_file.close()
