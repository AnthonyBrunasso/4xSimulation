# Define game types with game_types.py.
import sys
sys.path.append('../data')

import game_types 
import store 

# This will need to be updated if unique characters are added
# to game type names that aren't valid as the key of an enum.
def enumify(s):
  return s.replace(" ","_").upper()

def generate_gametype(game_type, object_types):
  type_name = game_type.upper() + "_TYPE"
  param_name = game_type.lower()

  # Declare enum.
  print("""\nenum class %(type_name)s {\n""" % {
  'type_name' : type_name,
  }, end="")

  # Generate keys and values for enum types.
  for otype in object_types:
    print("""  {0} = {1},\n""".format(enumify(otype[0]), otype[1]), end="")

  print("};\n")

  # Create enum to string function.
  print("inline std::string get_{0}_name({1} {2})".format(param_name, type_name, param_name), end=" {\n")

  print("  switch ({0})".format(param_name), end=" {\n")
  for otype in object_types:
    print("""  case %(enum)s::%(type)s:\n    return "%(name)s";\n""" %  {
  'enum' : type_name,
  'type' : enumify(otype[0]), 
  'name' : otype[0]}, end="")

  print("  default:\n    return {0};\n  }}".format("\"Unknown\""))
  print("  return \"Unknown\";\n}\n")

  # Create string to enum function.
  print("inline {0} get_{1}(const std::string& name)".format(type_name, type_name.lower()), end=" {\n")
  for otype in object_types:
    print("""  if (name == "%(name)s") return %(type)s;\n""" %  {
  'name' : otype[0], 
  'type' : str(type_name + "::" + enumify(otype[0]))}, end="")

  print("  // If the type isn't recognized return the first in the enum.")
  print("  return {0};\n}}".format(str(type_name + "::" + enumify(otype[0]))))

  # Function to enumerate over all enums.  
  print("\ninline void for_each_{0}(std::function<void({1})> operation)".format(type_name.lower(), type_name), end=" {\n")
  print("  std::vector<{0}> enums {{".format(type_name))
  for otype in object_types:
    print("""    %(enum)s""" %  {
  'enum' : str(type_name + "::" + enumify(otype[0]))}, end=",\n") 
  print("  };")
  print("  for (auto type : enums) operation(type);\n}")


if __name__ == '__main__':
  import sys
  # Redirect out to game types file.
  sys.stdout = open('../include/game_types.h', 'w')
  print("// NOTE: This is an autogenerated file. Modify at your own peril!")
  print("// To make changes to these types, or add new ones:")
  print("//    Edit data/game_types.py")
  print("//    Run tools/type_generator.py\n")
  print("#pragma once\n")
  print("#include <string>")
  print("#include <functional>")
  print("#include <vector>")

  for game_type, object_types in store.game_types.items():
    generate_gametype(game_type, object_types)
